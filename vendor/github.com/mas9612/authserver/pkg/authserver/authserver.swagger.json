{
  "swagger": "2.0",
  "info": {
    "title": "pkg/authserver/authserver.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/oauth/token": {
      "post": {
        "summary": "CreateToken creates and returns new JWT token for requested identity.",
        "operationId": "CreateToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authserverToken"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authserverCreateTokenRequest"
            }
          }
        ],
        "tags": [
          "Authserver"
        ]
      }
    },
    "/v1/validate": {
      "post": {
        "summary": "ValidateToken validates given token and returns its validity.",
        "operationId": "ValidateToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authserverValidateTokenResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authserverValidateTokenRequest"
            }
          }
        ],
        "tags": [
          "Authserver"
        ]
      }
    }
  },
  "definitions": {
    "authserverCreateTokenRequest": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "user is the username which want to be authenticate."
        },
        "password": {
          "type": "string",
          "description": "password is the credential of given user."
        },
        "orig_host": {
          "type": "string",
          "description": "orig_host is the hostname for which JWT token is valid."
        }
      },
      "description": "*\nCreateTokenRequest represents the request of CreateToken."
    },
    "authserverToken": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "token is the JWT token."
        }
      },
      "description": "*\nToken represents the response of CreateToken."
    },
    "authserverValidateTokenRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "token is the JWT token."
        }
      },
      "description": "*\nValidateTokenRequest represents the request of ValidateToken."
    },
    "authserverValidateTokenResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean",
          "format": "boolean",
          "description": "valid represents whether given token is valid or not."
        },
        "user": {
          "type": "string",
          "description": "user is the authenticated username."
        }
      },
      "description": "*\nValidateTokenResponse represents the response of ValidateToken."
    }
  }
}
